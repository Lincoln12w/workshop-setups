#!/bin/bash
#
# Descriptor:
#	Install cuda
#
#   CUDA archived url: https://developer.nvidia.com/cuda-downloads & https://developer.nvidia.com/cuda-toolkit-archive
#   CUDA download url: https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux          CUDA 10.0
#                      https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.168_418.67_linux.run      CUDA 10.1
#
#   cuDNN archived url: https://developer.nvidia.com/rdp/cudnn-download
#   cuDNN download url: https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v7.5.1/prod/10.0_20190418/cudnn-10.0-linux-x64-v7.5.1.10.tgz     cuDNN 7.5.1
#
#   tensorflow-gpu 1.13.1       |       CUDA 10.0       |       cuDNN 7.5
#   tensorflow-gpu 1.12.0       |       CUDA 9.0        |       cuDNN 6.0
#
# Modify History
# --------------
# 00a 30Apr18 lzw create, split from install_caffe2

# Reboot needed.
install_driver()
{
    driver_ver=${$(sudo dpkg --list | grep 'nvidia-*' | awk 'NR<2{print $3}')%-*}
    sudo add-apt-repository ppa:graphics-drivers/ppa
    sudo apt-get update
    ubuntu-drivers devices
    ubuntu-drivers autoinstall
}

cuda_version()
{
    ver=$(cat /etc/issue | awk '{print $2}')
    major_ver=${ver%.*}

    if [[ "${major}" == "18.04" ]]; then
        cuda_ver="10.0"
        cudnn_ver="7.5.1"
    elif [[ "${major}" == "16.04" ]]; then
        cuda_ver=8
    fi
}

install_cuda()
{
    version_cuda()
    {
        echo "$(cat /usr/local/cuda/version.txt | cut -d ' ' -f 3 | cut -d '.' -f 1-2)"
    }
    if [[ -e /usr/local/cuda/version.txt ]]; then
        if [[ "$(version_cuda)" == "$1" ]]; then
            echo "CUDA $1 is already installed."
            return
        fi
    fi

    echo "Starting install CUDA $1"

    wget "https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux"
    # Deselect the driver if deiver is already installed.
    sudo sh cuda_10.0.130_410.48_linux

    cat >> ~/.zshrc << EOF
# CUDA
export PATH=$PATH:/usr/local/cuda/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64
EOF
    source ~/.zshrc

    # Test CUDA installation.
    cp -r /usr/local/cuda/samples $HOME
    cd $HOME/samples/1_Utilities/deviceQuery
    make clean && make
    ./deviceQuery > /dev/null && echo "CUDA ${version_cuda} is installed successfully!" || "Failed to install CUDA ${version_cuda}!"
}

install_cudnn()
{
    version_cudnn()
    {
        cudnn_major=$(cat /usr/local/cuda/include/cudnn.h | grep "#define CUDNN_MAJOR" | cut -d ' ' -f 8)
        cudnn_minor=$(cat /usr/local/cuda/include/cudnn.h | grep "#define CUDNN_MINOR" | cut -d ' ' -f 8)
        echo "${cudnn_major}"."${cudnn_minor}"
    }

    if [[ -e /usr/local/cuda/include/cudnn.h ]]; then
        if [[ "$(version_cudnn)" == "$2" ]]; then
            echo "cuDNN $2 is already installed."
            return
        fi
        echo "Updte cuDNN from $(version_cudnn) to $2."
    fi

    echo "Starting install cuDNN $2."
    # wget "https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v6/prod/8.0_20170307/cudnn-8.0-linux-x64-v6.0-tgz"
    wget "https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v7.5.1/prod/10.0_20190418/cudnn-10.0-linux-x64-v7.5.1.10.tgz"
    sudo tar -zxf cudnn-10.0-linux-x64-v7.5.1.10.tgz -C /usr/local
    sudo ldconfig

    # Test cuDNN installation.
    # cp -r /usr/src/cudnn_samples_v7/ $HOME
    # cd  $HOME/cudnn_samples_v7/mnistCUDNN
    # make clean && make
    # ./mnistCUDNN
    echo "cuDNN ${version_cudnn} is installed successfully!"
}
